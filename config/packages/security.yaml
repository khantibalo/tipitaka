security:

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\TipitakaUsers
                property: username
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    firewalls:       
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            logout:
                path: app_logout
                # where to redirect after logout
                target: index
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login 
                enable_csrf: true  
                use_referer: true 
            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 6048000 # 604800 - 1 week in seconds                        
            #custom_authenticator: App\Security\SecurityAuthenticator
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    
    role_hierarchy:
        ROLE_AUTHOR: ROLE_USER
        ROLE_EDITOR: ROLE_AUTHOR
        ROLE_ADMIN: ROLE_EDITOR
    
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
      - { path: ^/login$, roles: PUBLIC_ACCESS }
      - { path: ^/p/\d+/split, roles: ROLE_AUTHOR }
      - { path: ^/translation/edit, roles: ROLE_AUTHOR }
      - { path: ^/quote/code, roles: ROLE_USER }
      - { path: ^/node/\d+/split, roles: ROLE_AUTHOR }
      - { path: ^/translation/import, roles: ROLE_AUTHOR }
      - { path: ^/sentenceid/\d+/join, roles: ROLE_EDITOR }
      - { path: ^/translationid/\d+/shiftdown , roles: ROLE_AUTHOR }
      - { path: ^/translationid/\d+/shiftup, roles: ROLE_AUTHOR }
      - { path: ^/user$, roles: ROLE_USER }
      - { path: ^/sources/list, roles: ROLE_EDITOR }
      - { path: ^/source/edit, roles: ROLE_EDITOR }
      - { path: ^/comment/delete, roles: ROLE_USER }
      - { path: ^/node/\d+/names, roles: ROLE_EDITOR }      
      - { path: ^/node/name/edit, roles: ROLE_EDITOR }
      - { path: ^/fill_pst, roles: ROLE_ADMIN }
      - { path: ^/fill_nst, roles: ROLE_ADMIN }
      - { path: ^/node/\d+/edit, roles: ROLE_EDITOR }
      - { path: ^/node/\d+/table/enable, roles: ROLE_EDITOR }
      - { path: ^/node/tags/\d+, roles: ROLE_AUTHOR }
      - { path: ^/tag/edit, roles: ROLE_EDITOR }
      - { path: ^/node/\d+/tag/\d+/remove, roles: ROLE_EDITOR }
      - { path: ^/ajax/translation/update, roles: ROLE_AUTHOR }
      - { path: ^/ajax/translation/add, roles: ROLE_AUTHOR }
      - { path: ^/toc/collectionitem/edit, roles: ROLE_EDITOR }
      - { path: ^/toc/collectionitem/\d+/names, roles: ROLE_EDITOR }
      - { path: ^/toc/collectionitemname/edit, roles: ROLE_EDITOR }
      - { path: ^/sentenceid/\d+/edit, roles: ROLE_ADMIN }
      - { path: ^/sentenceid/\d+/shiftdown, roles: ROLE_ADMIN }
      - { path: ^/toc/tag/\d+/names/list, roles: ROLE_EDITOR }
      - { path: ^/toc/tag/name/edit, roles: ROLE_EDITOR }
      - { path: ^/pali/copy/nodeid/\d+/sourceid/\d+, roles: ROLE_ADMIN }
      - { path: ^/fixpaths/nodeid/\d+, roles: ROLE_ADMIN }
      - { path: ^/dictionary/paliword/\d+/tags, roles: ROLE_EDITOR }
      - { path: ^/dictionary/paliword/\d+/tag/\d+/remove, roles: ROLE_EDITOR }
      - { path: ^/dictionary/entry/edit, roles: ROLE_EDITOR }
      - { path: ^/dictionary/entry/use/edit, roles: ROLE_EDITOR }
      - { path: ^/user/list, roles: ROLE_ADMIN }
      - { path: ^/user/\d+/edit, roles: ROLE_ADMIN }
      - { path: ^/p/\d+/analyze, roles: ROLE_USER }
      - { path: ^/p/\d+/analyze/sentence/\d+, roles: ROLE_USER }
      - { path: ^/statistics/view, roles: ROLE_EDITOR }
      - { path: ^/node/\d+/clean_empty_rows, roles: ROLE_AUTHOR }      
      - { path: ^/comments/list_all/pageid/\d+, roles: ROLE_USER }  
      - { path: ^/node/\d+/pali_import, roles: ROLE_EDITOR } 
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

